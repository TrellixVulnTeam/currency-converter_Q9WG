"use strict";function toFloat(e){let t=parseFloat(e);return parseFloat(t.toFixed(4))}function toInt(e){return parseInt(e.replace(/[^\d]/g,""))}function toFixed(e,t){let a=e/t;return a<=999?a.toFixed(4):Math.round(a)}function toLastWord(e){let t,a=e.split(" ");for(let e=0;e<a.length;++e)/\S/.test(a[e])&&(t=e);return console.log(a[t]),a[t]}let Requester={array:[],async Get(e){let t;return await fetch(e).then((e=>e.json())).then((e=>{t=e})),await t},Transducer:async e=>await JSON.parse(e),Builder(e){let t=new Date;document.querySelector("h1.header__text").innerHTML=`Курс валют от ЦБ РФ <br class="header__br"/> на ${t.getDate()}-${t.getMonth()+1}-${t.getFullYear()} г.`;let a=document.querySelector(".exchange-rates__tbody");document.querySelector(".exchange-rates__thead").insertAdjacentHTML("afterbegin",'<tr class="exchange-rates__tr" id="thead"/>');let r=document.querySelector("#thead");r.insertAdjacentHTML("beforeend",'<td class="exchange-rates__column_name" id="td0">код</td>'),r.insertAdjacentHTML("beforeend",'<td class="exchange-rates__column_name" id="td1">валюта</td>'),r.insertAdjacentHTML("beforeend",'<td class="exchange-rates__column_name" id="td2">Курс ₽</td>'),a.insertAdjacentHTML("beforeend",'<tr class="exchange-rates__tr exchange-rates__tr__control" id="control"/>'),document.querySelector(".exchange-rates__tr__control").insertAdjacentHTML("beforeend",'<td class="exchange-rates__cell exchange-rates_side exchange-rates__tr_left" id="td0"><div class="search"><input class="search__input" type="search" id="search-by-cod" name="search"></div></td>\n<td class="exchange-rates__cell exchange-rates_main exchange-rates__search" id="td1"><div class="search"><input class="search__input" type="search" id="search-by-name" name="search"></div>\n<td class="exchange-rates__cell exchange-rates_side exchange-rates__tr_right converter_big" id="td2"><div class="converter"><input class="converter__input" type="search" id="converter" name="converter"></div></td>');Object.keys(e).length;for(let t=0;t<Object.keys(e.amount).length;++t)if(null!==e.ckod[""+(t+7)]){let r=e.bkod[t+7];a.insertAdjacentHTML("beforeend",`<tr class="exchange-rates__tr exchange-rates__tr_hover" id="tr${t}"/>`);let n=document.querySelector("#tr"+t);n.insertAdjacentHTML("beforeend",`<td class="exchange-rates__cell exchange-rates_side exchange-rates__tr_left " id="td0"><span>${e.ckod[""+(t+7)]}</span> <div>${r}</div></td>`),n.insertAdjacentHTML("beforeend",`<td class="exchange-rates__cell exchange-rates_main" id="td1"><img class="exchange-rates__flag" src="" alt="${r}"><span class="exchange-rates__cell_country"></span><br/><span  class="exchange-rates__cell_currency">${e.name[""+(t+7)]}</span></td>`),n.insertAdjacentHTML("beforeend",`<td class="exchange-rates__cell exchange-rates_side exchange-rates__tr_right" id="td2">${toFixed(toFloat(e.course[""+(t+7)]),toInt(""+e.amount[""+(t+7)]))}</td>`)}},ExtensionBuilder(e,t){let a=document.querySelectorAll(".exchange-rates__tr_hover");for(let t=0;t<a.length;++t)for(let r=0;r<e.country.length;++r){if(e.country[r].alpha2===a[t].firstElementChild.querySelector("div").innerHTML.substring(0,2)){a[t].firstElementChild.nextElementSibling.querySelector(".exchange-rates__cell_country").innerHTML=e.country[r].name,a[t].firstElementChild.nextElementSibling.querySelector(".exchange-rates__flag").src=`/build/assets/icons/flags/${e.country[r].alpha2}.png`;break}r===e.country.length-1&&(a[t].firstElementChild.nextElementSibling.querySelector(".exchange-rates__cell_country").innerHTML=a[t].firstElementChild.nextElementSibling.querySelector(".exchange-rates__cell_currency").innerHTML)}}},Doings={imageDisplay(e,t,a){""!==e?t.classList.add(a+"_hide-icon"):t.classList.remove(a+"_hide-icon")},NewSearch(){document.querySelectorAll(".search").forEach((e=>{e.addEventListener("input",(()=>{let t=e.querySelector("input").value;this.imageDisplay(t,e,"search");let a=document.querySelectorAll(".exchange-rates__tr_hover"),r=e.parentElement.id;for(let e=0;e<a.length;++e){let n="td1"===r?"td2":"td1";-1===a[e].querySelector("#"+r).innerHTML.toLowerCase().indexOf(""+t.toLowerCase())?!1===a[e].classList.contains("exchange-rates__tr_hide")&&!1===a[e].classList.contains(""+n)&&!1===a[e].classList.contains("td2")&&(a[e].classList.add("exchange-rates__tr_hide"),a[e].classList.add(""+r)):!0===a[e].classList.contains("exchange-rates__tr_hide")&&!0===a[e].classList.contains(""+r)&&(a[e].classList.remove("exchange-rates__tr_hide"),a[e].classList.remove(""+r))}}))}))},NewConverter(){document.querySelectorAll(".converter").forEach((e=>{e.addEventListener("input",(()=>{let t=e.querySelector("input").value;this.imageDisplay(t,e,"converter");let a=document.querySelectorAll(".exchange-rates__tr_hover"),r=e.parentElement.id;for(let e=0;e<a.length;++e){toFloat(a[e].querySelector("#"+r).innerHTML)>toInt(t)&&!1===a[e].classList.contains("td0")&&!1===a[e].classList.contains("td1")?(a[e].classList.add("exchange-rates__tr_hide"),a[e].classList.add("td2")):!0===a[e].classList.contains(""+r)&&(a[e].classList.remove("exchange-rates__tr_hide"),a[e].classList.remove("td2"))}}))}))}};async function Main(){let e=await Requester.Transducer(await Requester.Get("http://192.168.0.106/build/php/base/table.json"));await Requester.Builder(e);let t=await Requester.Get("http://192.168.0.106/build/php/base/codename.json");await Requester.ExtensionBuilder(t,e),await Doings.NewSearch(),await Doings.NewConverter()}Main();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
